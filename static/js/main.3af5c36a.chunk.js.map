{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DATA","map","d","ss","split","country","capital","h0","hangul","s","join","h1","fuse","Fuse","shouldSort","includeScore","includeMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","indexOfValue","arr","i","j","length","App","state","query","result","onChange","e","target","value","search","_this","setState","react_default","a","createElement","className","type","this","App_List","data","Component","List","renderTitle","text","high","t","style","backgroundColor","concat","_this3","props","h","str","ind","normalize","arguments","undefined","charGroup","c","ranks","Array","fill","forEach","_ref","_ref2","Object","slicedToArray","start","end","gIdx","rank","highlight","item","matches","indices","key","opacity","score","toFixed","React","PureComponent","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAIMA,EAAO,CACT,oCACA,0CACA,sDACA,oCACA,8BACA,sDACA,kEACA,0CACA,0CACA,sDACA,sDACA,oCACA,sDACA,oCACA,+LACA,4DACA,4DACA,0CACA,gDACA,gDACA,0CACA,0CACA,gDACA,0CACA,gDACA,0CACA,+EACA,oCACA,0CACA,gDACA,4DACA,0CACA,gDACA,gDACA,0CACA,4DACA,kEACA,0CACA,gDACA,sDACA,4DACA,8EACA,iDACA,0CACA,yEACA,0CACA,wEACA,oCACA,sDACA,0CACA,sGACA,4DACA,sDACA,gDACA,kEACA,gDACA,oCACA,oCACA,gDACA,yCACA,0CACA,+EACA,sDACA,0CACA,kEACA,uDACA,oCACA,gDACA,gDACA,4DACA,0CACA,0CACA,gDACA,4GACA,2FACA,sDACA,uGACA,gDACA,kEACA,8BACA,2FACA,+DACA,gDACA,sDACA,8EACA,0CACA,kEACA,6MACA,sDACA,mEACA,0CACA,4DACA,gDACA,wEACA,2FACA,+EACA,sDACA,kEACA,6DACA,oCACA,sDACA,4JACA,gDACA,oCACA,gDACA,wEACA,4DACA,sDACA,4DACA,sDACA,kHACA,sDACA,2FACA,oFACA,kEACA,4DACA,gDACA,sDACA,sDACA,4DACA,gDACA,oCACA,gDACA,0CACA,yEACA,4DACA,4GACA,gDACA,0FACA,wEACA,kEACA,8BACA,8BACA,0CACA,kEACA,sDACA,4DACA,oCACA,0CACA,4DACA,kEACA,sDACA,0CACA,gDACA,oCACA,4GACA,0CACA,0CACA,oFACA,4DACA,8BACA,gDACA,0CACA,iDACA,oFACA,gDACA,yEACA,sDACA,kEACA,0CACA,gDACA,0CACA,oCACA,0CACA,0CACA,4DACA,4DACA,oCACA,gDACA,0CACA,0CACA,0CACA,sDACA,sDACA,wEACA,gDACA,6DACA,oEACA,oCACA,sDACA,4DACA,kEACA,gDACA,sDACA,sDACA,gDACA,8BACA,oCACA,8BACA,gDACA,8EACA,gDACA,0CACA,8EACA,iGACA,0CACA,sDACA,k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","file":"static/js/main.3af5c36a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Fuse from \"fuse.js\";\nimport * as hangul from \"hangul-js\";\n\nconst DATA = [\n    \"가나 - 아크라\",\n    \"가봉 - 리브르빌\",\n    \"가이아나 - 조지타운\",\n    \"감비아 - 반줄\",\n    \"괌 - 하갓냐\",\n    \"과테말라 - 과테말라\",\n    \"그레나다 - 세인트조지스\",\n    \"그리스 - 아테네\",\n    \"기니 - 코나크리\",\n    \"기니비사우 - 비사우\",\n    \"나미비아 - 빈트후크\",\n    \"나우루 - 야렌\",\n    \"나이지리아 - 아부자\",\n    \"남수단 - 주바\",\n    \"남아프리카 공화국 - 프리토리아(행정), 블룸폰테인(사법), 케이프타운(입법)\",\n    \"남오세티야 - 츠힌발리\",\n    \"네덜란드 - 암스테르담\",\n    \"네팔 - 카트만두\",\n    \"노르웨이 - 오슬로\",\n    \"뉴질랜드 - 웰링턴\",\n    \"니우에 - 알로피\",\n    \"니제르 - 니아메\",\n    \"니카라과 - 마나과\",\n    \"대한민국 - 서울\",\n    \"덴마크 - 코펜하겐\",\n    \"도미니카 - 로조\",\n    \"도미니카 공화국 - 산토도밍고\",\n    \"독일 - 베를린\",\n    \"동티모르 - 딜리\",\n    \"라오스 - 비엔티안\",\n    \"라이베리아 - 몬로비아\",\n    \"라트비아 - 리가\",\n    \"러시아 - 모스크바\",\n    \"레바논 - 베이루트\",\n    \"레소토 - 마세루\",\n    \"루마니아 - 부쿠레슈티\",\n    \"룩셈부르크 - 룩셈부르크\",\n    \"르완다 - 키갈리\",\n    \"리비아 - 트리폴리\",\n    \"리투아니아 - 빌뉴스\",\n    \"리히텐슈타인 - 파두츠\",\n    \"마다가스카르 - 안타나나리보\",\n    \"마셜 제도 - 마주로\",\n    \"마카오 - 마카우\",\n    \"마케도니아 공화국 - 스코페\",\n    \"말라위 - 릴롱궤\",\n    \"말레이시아 - 쿠알라룸푸르\",\n    \"말리 - 바마코\",\n    \"멕시코 - 멕시코시티\",\n    \"모나코 - 모나코\",\n    \"모로코 - 라바트(입법), 카사블랑카(행정)\",\n    \"모리셔스 - 포트루이스\",\n    \"모리타니 - 누악쇼트\",\n    \"모잠비크 - 마푸투\",\n    \"몬테네그로 - 포드고리차\",\n    \"몰도바 - 키시너우\",\n    \"몰디브 - 말레\",\n    \"몰타 - 발레타\",\n    \"몽골 - 울란바토르\",\n    \"미국 - 워싱턴 D.C.\",\n    \"미얀마 - 네피도\",\n    \"미크로네시아 연방 - 팔리키르\",\n    \"바누아투 - 포트빌라\",\n    \"바레인 - 마나마\",\n    \"바베이도스 - 브리지타운\",\n    \"바티칸 시국 - 바티칸\",\n    \"바하마 - 나소\",\n    \"방글라데시 - 다카\",\n    \"베냉 - 포르토노보\",\n    \"베네수엘라 - 카라카스\",\n    \"베트남 - 하노이\",\n    \"벨기에 - 브뤼셀\",\n    \"벨라루스 - 민스크\",\n    \"벨리즈 - 벨모판(행정), 벨리즈시티(사실상)\",\n    \"보스니아 헤르체고비나 - 사라예보\",\n    \"보츠와나 - 가보로네\",\n    \"볼리비아 - 수크레(헌법 상), 라파스(행정)\",\n    \"부룬디 - 부줌부라\",\n    \"부르키나파소 - 와가두구\",\n    \"부탄 - 팀푸\",\n    \"북마리아나 제도 - 사이판 섬(주장)[1]\",\n    \"북키프로스 - 니코시아[2]\",\n    \"불가리아 - 소피아\",\n    \"브라질 - 브라질리아\",\n    \"브루나이 - 반다르스리브가완\",\n    \"사모아 - 아피아\",\n    \"사우디아라비아 - 리야드\",\n    \"사하라 아랍 민주 공화국 - 엘아이운(법상), 티파리티 및 사하라 난민 캠프(사실상)\",\n    \"산마리노 - 산마리노\",\n    \"상투메 프린시페 - 상투메\",\n    \"세네갈 - 다카르\",\n    \"세르비아 - 베오그라드\",\n    \"세이셸 - 빅토리아\",\n    \"세인트루시아 - 캐스트리스\",\n    \"세인트빈센트 그레나딘 - 킹스타운\",\n    \"세인트키츠 네비스 - 바스테르\",\n    \"소말리아 - 모가디슈\",\n    \"소말릴란드 - 하르게이사\",\n    \"솔로몬 제도 - 호니아라\",\n    \"수단 - 하르툼\",\n    \"수리남 - 파라마리보\",\n    \"스리랑카 - 스리자야와르데네푸라코테(사실상), 콜롬보(행정)\",\n    \"스웨덴 - 스톡홀름\",\n    \"스위스 - 베른\",\n    \"스페인 - 마드리드\",\n    \"슬로바키아 - 브라티슬라바\",\n    \"슬로베니아 - 류블랴나\",\n    \"시리아 - 다마스쿠스\",\n    \"시에라리온 - 프리타운\",\n    \"싱가포르 - 싱가포르\",\n    \"아랍에미리트 - 아부다비(입법), 두바이(행정)\",\n    \"아르메니아 - 예레반\",\n    \"아르차흐 공화국 - 스테파나케르트\",\n    \"아르헨티나 - 부에노스아이레스\",\n    \"아이슬란드 - 레이캬비크\",\n    \"아이티 - 포르토프랭스\",\n    \"아일랜드 - 더블린\",\n    \"아제르바이잔 - 바쿠\",\n    \"아프가니스탄 - 카불\",\n    \"안도라 - 안도라라베야\",\n    \"알바니아 - 티라나\",\n    \"알제리 - 알제\",\n    \"압하지야 - 수후미\",\n    \"앙골라 - 루안다\",\n    \"앤티가 바부다 - 세인트존스\",\n    \"에리트레아 - 아스마라\",\n    \"에스와티니 - 음바바네(행정), 로밤바(입법)\",\n    \"에스토니아 - 탈린\",\n    \"에콰도르 - 키토(행정), 과야킬(입법)\",\n    \"에티오피아 - 아디스아바바\",\n    \"엘살바도르 - 산살바도르\",\n    \"영국 - 런던\",\n    \"예멘 - 사나\",\n    \"오만 - 무스카트\",\n    \"오스트레일리아 - 캔버라\",\n    \"오스트리아 - 비엔나\",\n    \"온두라스 - 테구시갈파\",\n    \"요르단 - 암만\",\n    \"우간다 - 캄팔라\",\n    \"우루과이 - 몬테비데오\",\n    \"우즈베키스탄 - 타슈켄트\",\n    \"우크라이나 - 키예프\",\n    \"웨일즈 - 카디프\",\n    \"이라크 - 바그다드\",\n    \"이란 - 테헤란\",\n    \"이스라엘 - 예루살렘(행정), 텔아비브(입법)\",\n    \"이집트 - 카이로\",\n    \"이탈리아 - 로마\",\n    \"인도 - 뉴델리(입법), 뭄바이(행정)\",\n    \"인도네시아 - 자카르타\",\n    \"일본 - 도쿄\",\n    \"자메이카 - 킹스턴\",\n    \"잠비아 - 루사카\",\n    \"적도 기니 - 말라보\",\n    \"조선민주주의인민공화국 - 평양\",\n    \"조지아 - 트빌리시\",\n    \"중앙아프리카 공화국 - 방기\",\n    \"중화민국 - 타이베이\",\n    \"중화인민공화국 - 베이징\",\n    \"지부티 - 지부티\",\n    \"짐바브웨 - 하라레\",\n    \"차드 - 은자메나\",\n    \"체코 - 프라하\",\n    \"칠레 - 산티아고\",\n    \"카메룬 - 야운데\",\n    \"카보베르데 - 프라이아\",\n    \"카자흐스탄 - 아스타나\",\n    \"카타르 - 도하\",\n    \"캄보디아 - 프놈펜\",\n    \"캐나다 - 오타와\",\n    \"케냐 - 나이로비\",\n    \"코모로 - 모로니\",\n    \"코소보 - 프리슈티나\",\n    \"코스타리카 - 산호세\",\n    \"코트디부아르 - 야무수크로\",\n    \"콜롬비아 - 보고타\",\n    \"콩고 공화국 - 브라자빌\",\n    \"콩고 민주 공화국 - 킨샤사\",\n    \"쿠바 - 아바나\",\n    \"쿠웨이트 - 쿠웨이트\",\n    \"크로아티아 - 자그레브\",\n    \"키르기스스탄 - 비슈케크\",\n    \"키리바시 - 타라와\",\n    \"키프로스 - 니코시아\",\n    \"타지키스탄 - 두샨베\",\n    \"탄자니아 - 도도마\",\n    \"태국 - 방콕\",\n    \"터키 - 앙카라\",\n    \"토고 - 로메\",\n    \"통가 - 누쿠알로파\",\n    \"투르크메니스탄 - 아슈하바트\",\n    \"투발루 - 푸나푸티\",\n    \"튀니지 - 튀니스\",\n    \"트란스니스트리아 - 티라스폴\",\n    \"트리니다드 토바고 - 포트오브스페인\",\n    \"파나마 - 파나마\",\n    \"파라과이 - 아순시온\",\n    \"파키스탄 - 이슬라마바드\",\n    \"파푸아뉴기니 - 포트모르즈비\",\n    \"팔라우 - 멜레케오크\",\n    \"팔레스타인 - 라말라(사실상) / 예루살렘(주장), 요르단 강 서안 지구 / 가자 지구\",\n    \"페루 - 리마\",\n    \"포르투갈 - 리스본\",\n    \"폴란드 - 바르샤바\",\n    \"프랑스 - 파리\",\n    \"피지 - 수바\",\n    \"핀란드 - 헬싱키\",\n    \"필리핀 - 마닐라\",\n    \"헝가리 - 부다페스트\",\n    \"홍콩 - 중시 구\"\n].map(d => {\n    const ss = d.split(\" - \");\n    return {\n        country: ss[0],\n        capital: ss[1],\n        h0: hangul\n            .d(ss[0], true)\n            .map(s => s[0])\n            .join(\"\"),\n        h1: hangul.d(ss[0]).join(\"\")\n    };\n});\nconst options = {\n    shouldSort: true,\n    includeScore: true,\n    includeMatches: true,\n    threshold: 0.6,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 10,\n    minMatchCharLength: 1,\n    keys: [\"country\", \"h1\"] // TODO \"h0\" 초성만으로 검색하기\n};\n\nlet fuse = new Fuse(DATA, options);\n\nfunction highlight(str, ind, normalize = false) {\n    const charGroup = str.split('').map(c => hangul.d(c));\n    const ranks = new Array(charGroup.length).fill(0);\n\n    ind.forEach(([start, end]) => {\n        for (let i = start; i <= end; i++) {\n            let gIdx = indexOfValue(charGroup, i)[1];\n            if (gIdx !== undefined)\n                ranks[gIdx]++;\n        }\n    });\n\n    if (normalize) return ranks.map((rank, i) => rank / charGroup[i].length);\n    return ranks;\n}\n\nfunction indexOfValue(arr, i) {\n    let j = 0;\n    while (i >= 0 && j >= 0 && j < arr.length) {\n        if (arr[j].length > i) return [arr[j][i], j, i];\n        else {\n            i -= arr[j].length;\n            j++;\n        }\n    }\n    return [];\n}\n\nclass App extends Component {\n    state = {\n        query: \"\",\n        result: []\n    };\n\n    onChange = e => {\n        const query = e.target.value;\n        const result = fuse.search(hangul.d(query).join(\"\"));\n        this.setState({query, result});\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <label>\n                    나라이름:\n                    <input\n                        type=\"text\"\n                        onChange={this.onChange}\n                        value={this.state.query}\n                    />\n                </label>\n                <List data={this.state.result}/>\n            </div>\n        );\n    }\n}\n\nclass List extends React.PureComponent {\n\n    renderTitle = (text, high) => {\n        return text.split('').map((t, i) => {\n            return <span style={{backgroundColor: `rgba(255,128,0,${high[i]})`}}>{t}</span>\n        })\n    };\n\n    render() {\n        const {data} = this.props;\n        return (\n            <ul>\n                {data &&\n                data.length > 0 &&\n                data.map(d => {\n                    let h = highlight(d.item.country, d.matches[0].indices, true);\n                    return <li key={d.item.country} style={{opacity: 1 - d.score}}>\n                        {d.score.toFixed(5)} - {this.renderTitle(d.item.country, h)} - {d.item.h0} - {d.item.h1}\n                        {/*{JSON.stringify(h)}*/}\n                        {/*{JSON.stringify(d.matches)}*/}\n                    </li>;\n                })}\n                {data && data.length === 0 && <li>결과 없음</li>}\n            </ul>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}